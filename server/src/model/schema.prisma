// generate prisma client lib
generator client {
  provider = "prisma-client-js"
}

// generate prisma type-graphql bk
generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "./generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Book Genre HardCoded 
enum Genre {
  FANTASY
  DRAMA
  DYSTOPIAN
  ADVENTURE
  ROMANCE
  MYSTERY
  HORROR
  THRILLER
  SCIENCEFICTION
  HISTORIALFICTION
  CHILDRENFICTION
}

// DB Author Model
model Author {
  author_id  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  biography  String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Inventory  Inventory[]
}

// DB Inventory Model
model Inventory {
  entry_id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  author           Author   @relation(fields: [authorAuthor_id], references: [author_id])
  genre            Genre[]
  publication_date DateTime
  isbn             String   @unique
  authorAuthor_id  String   @db.Uuid
}

// // DB Publisher Model
// model Publisher {
//   publisher_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   name           String
//   address        String
//   contact_number String?
//   created_at     DateTime @default(now())
//   updated_at     DateTime @updatedAt
// }

// // DB Book Model
// model Book {
//   book_id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   title                 String
//   publication_date      DateTime
//   isbn                  String
//   genre                 Genre[]
//   created_at            DateTime   @default(now())
//   updated_at            DateTime   @updatedAt
//   Inventory             Inventory?
//   Author                Author?    @relation(fields: [authorAuthor_id], references: [author_id])
//   authorAuthor_id       String?    @db.Uuid
//   Publisher             Publisher? @relation(fields: [publisherPublisher_id], references: [publisher_id])
//   publisherPublisher_id String?    @db.Uuid
// }
